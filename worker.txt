// worker.js
// 曦月的小窝 - 个人博客系统

// 管理员凭证
const ADMIN_USERNAME = 'xiyue';
const ADMIN_PASSWORD = 'xiyue777';
const BAN_MESSAGE = '您的账号已被管理员封禁,请联系 linyi8100@gmail.com 解封';
const INVITE_CODE = 'xiyue666'; // 默认邀请码

// 简单的 UUID 生成器
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// 简化的 SHA-256 实现
function simpleSha256(str) {
  try {
    let hash = 0;
    if (str.length === 0) return '0';
    
    for (let i = 0; i < str.length; i++) {
      const chr = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + chr;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString(16);
  } catch (e) {
    console.error('SHA-256 error:', e);
    return 'error_hash';
  }
}

// HTML 转义函数（防止XSS攻击）
function escapeHTML(str) {
  if (!str) return '';
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

// 安全的 JSON 响应函数
function safeJsonResponse(data, status = 200) {
  try {
    return new Response(JSON.stringify(data), {
      status: status,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET,POST,DELETE,OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type,Authorization'
      }
    });
  } catch (e) {
    console.error('JSON response error:', e);
    return new Response(JSON.stringify({ 
      error: '服务器内部错误', 
      details: '无法生成响应' 
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    });
  }
}

// 处理 OPTIONS 预检请求
function handleOptions() {
  return new Response(null, {
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,POST,DELETE,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type,Authorization'
    }
  });
}

// 初始化管理员和默认设置
async function initAdmin(env) {
  try {
    const adminKey = `users/${ADMIN_USERNAME}`;
    const existing = await env.BLOG_KV.get(adminKey);
    
    if (!existing) {
      // 使用简单哈希
      const passwordHash = simpleSha256(ADMIN_PASSWORD);
      
      await env.BLOG_KV.put(adminKey, JSON.stringify({
        username: ADMIN_USERNAME,
        passwordHash,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
        nickname: '曦月',
        banned: false,
        role: 'founder',
        title: '创始人',
        gender: 'female',
        bio: '系统管理员',
        createdAt: new Date().toISOString(),
        lastActive: new Date().toISOString()
      }));
      
      // 设置默认邀请码
      await env.BLOG_KV.put('settings/invite_code', INVITE_CODE);
      
      console.log('管理员账户和默认设置已创建');
    }
  } catch (e) {
    console.error('初始化管理员失败:', e);
  }
}

// 验证用户登录
async function verifyUser(env, username, password) {
  try {
    const userKey = `users/${username}`;
    const userData = await env.BLOG_KV.get(userKey);
    
    if (!userData) return null;
    
    let user;
    try {
      user = JSON.parse(userData);
    } catch (e) {
      console.error('解析用户数据失败:', e);
      return null;
    }
    
    const expectedHash = simpleSha256(password);
    
    if (user.passwordHash === expectedHash && !user.banned) {
      // 更新最后活跃时间
      user.lastActive = new Date().toISOString();
      await env.BLOG_KV.put(userKey, JSON.stringify(user));
      
      return {
        username: user.username || username,
        nickname: user.nickname || username,
        role: user.role || 'user',
        title: user.title || '',
        avatar: user.avatar || 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',
        gender: user.gender || 'unknown',
        bio: user.bio || '',
        createdAt: user.createdAt,
        lastActive: user.lastActive
      };
    }
    
    return null;
  } catch (e) {
    console.error('验证用户时出错:', e);
    return null;
  }
}

// 验证 JWT 令牌
function verifyToken(token, secret) {
  try {
    if (!token || !secret) return false;
    
    const parts = token.split('.');
    if (parts.length !== 3) return false;
    
    const [header, payload, signature] = parts;
    const expectedSignature = simpleSha256(header + payload + secret);
    
    return signature === expectedSignature;
  } catch (e) {
    console.error('验证令牌时出错:', e);
    return false;
  }
}

// 解码令牌
function decodeToken(token) {
  try {
    if (!token) return null;
    
    const parts = token.split('.');
    if (parts.length !== 3) return null;
    
    const payload = parts[1];
    const decoded = atob(payload);
    
    return JSON.parse(decoded);
  } catch (e) {
    console.error('解码令牌时出错:', e);
    return null;
  }
}

// 检查权限
async function checkPermission(env, request) {
  try {
    const token = request.headers.get('Authorization')?.split(' ')[1];
    if (!token) return { valid: false, error: '未提供令牌' };
    
    // 检查 SECRET_KEY 是否设置
    if (!env.SECRET_KEY) {
      console.error('SECRET_KEY 未设置');
      return { valid: false, error: '服务器配置错误' };
    }
    
    // 验证令牌
    if (!verifyToken(token, env.SECRET_KEY)) {
      return { valid: false, error: '无效或过期的令牌' };
    }
    
    // 解码令牌
    const payload = decodeToken(token);
    if (!payload || !payload.username) {
      return { valid: false, error: '无效的令牌格式' };
    }
    
    // 获取用户信息
    const userKey = `users/${payload.username}`;
    const userData = await env.BLOG_KV.get(userKey);
    
    if (!userData) {
      return { valid: false, error: '用户不存在' };
    }
    
    let user;
    try {
      user = JSON.parse(userData);
    } catch (e) {
      console.error('解析用户数据失败:', e);
      return { valid: false, error: '用户数据损坏' };
    }
    
    if (user.banned) {
      return { valid: false, error: BAN_MESSAGE };
    }
    
    // 更新最后活跃时间
    user.lastActive = new Date().toISOString();
    await env.BLOG_KV.put(userKey, JSON.stringify(user));
    
    return { 
      valid: true, 
      user: {
        username: payload.username,
        nickname: user.nickname || payload.username,
        role: user.role || 'user',
        title: user.title || '',
        avatar: user.avatar || 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',
        gender: user.gender || 'unknown',
        bio: user.bio || '',
        createdAt: user.createdAt,
        lastActive: user.lastActive
      }
    };
  } catch (e) {
    console.error('检查权限时出错:', e);
    return { valid: false, error: '权限验证失败' };
  }
}

// 生成RSS订阅
async function generateRSS(env, baseUrl) {
  try {
    const list = await env.BLOG_KV.list({ prefix: 'posts/' });
    const posts = [];
    
    for (const key of list.keys) {
      try {
        const post = await env.BLOG_KV.get(key.name, 'json');
        if (post) posts.push(post);
      } catch (e) {
        console.error('获取帖子时出错:', e, key.name);
      }
    }
    
    // 按时间排序（最新在前）
    posts.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
    
    // 只取最新20条
    const recentPosts = posts.slice(0, 20);
    
    let rss = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
  <title>曦月的小窝</title>
  <link>${baseUrl}</link>
  <description>曦月的小窝 - 个人博客</description>
  <language>zh-CN</language>`;
    
    for (const post of recentPosts) {
      rss += `
  <item>
    <title>${escapeHTML(post.title)}</title>
    <link>${baseUrl}/#post-${post.id}</link>
    <description>${escapeHTML(post.content.substring(0, 200))}...</description>
    <pubDate>${new Date(post.createdAt).toUTCString()}</pubDate>
    <guid>${baseUrl}/#post-${post.id}</guid>
  </item>`;
    }
    
    rss += `
</channel>
</rss>`;
    
    return rss;
  } catch (e) {
    console.error('生成RSS时出错:', e);
    return null;
  }
}

// 主处理函数
export default {
  async fetch(request, env, ctx) {
    try {
      // 确保 SECRET_KEY 存在
      if (!env.SECRET_KEY) {
        console.error('环境变量 SECRET_KEY 未设置');
        return safeJsonResponse({ 
          error: '服务器配置错误', 
          details: 'SECRET_KEY 未设置' 
        }, 500);
      }
      
      // 初始化管理员
      try {
        await initAdmin(env);
      } catch (e) {
        console.error('初始化管理员时出错:', e);
      }
      
      const url = new URL(request.url);
      const pathname = url.pathname;
      const baseUrl = `${url.protocol}//${url.host}`;
      
      // 处理 OPTIONS 预检
      if (request.method === 'OPTIONS') {
        return handleOptions();
      }
      
      // 处理 RSS 订阅
      if (pathname === '/rss' || pathname === '/rss.xml') {
        const rss = await generateRSS(env, baseUrl);
        if (rss) {
          return new Response(rss, {
            headers: {
              'Content-Type': 'application/rss+xml; charset=utf-8',
              'Access-Control-Allow-Origin': '*'
            }
          });
        } else {
          return new Response('RSS生成失败', { status: 500 });
        }
      }
      
      // 处理根路径 - 返回前端 HTML
      if (pathname === '/') {
        return new Response(indexHTML, {
          headers: { 
            'Content-Type': 'text/html; charset=utf-8',
            'Access-Control-Allow-Origin': '*'
          }
        });
      }
      
      // API 路由
      if (pathname.startsWith('/api/')) {
        try {
          // 获取邀请码
          if (pathname === '/api/invite-code' && request.method === 'GET') {
            try {
              const inviteCode = await env.BLOG_KV.get('settings/invite_code');
              return safeJsonResponse({ inviteCode: inviteCode || INVITE_CODE });
            } catch (e) {
              console.error('获取邀请码时出错:', e);
              return safeJsonResponse({ error: '无法获取邀请码' }, 500);
            }
          }
          
          // 用户注册 - 添加邀请码验证
          if (pathname === '/api/register' && request.method === 'POST') {
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username, password, avatar, inviteCode, nickname, gender, bio } = data;
            
            // 获取当前邀请码
            try {
              const currentInviteCode = await env.BLOG_KV.get('settings/invite_code');
              // 验证邀请码
              if (inviteCode !== (currentInviteCode || INVITE_CODE)) {
                return safeJsonResponse({ error: '邀请码不正确' }, 403);
              }
            } catch (e) {
              console.error('验证邀请码时出错:', e);
              return safeJsonResponse({ error: '服务器错误' }, 500);
            }
            
            // 基本验证
            if (!username || !password) {
              return safeJsonResponse({ error: '用户名和密码是必填项' }, 400);
            }
            
            if (username.length < 3 || username.length > 20) {
              return safeJsonResponse({ error: '用户名长度必须在3-20个字符之间' }, 400);
            }
            
            if (password.length < 6) {
              return safeJsonResponse({ error: '密码至少需要6个字符' }, 400);
            }
            
            // 检查用户名是否已存在
            try {
              const existing = await env.BLOG_KV.get(`users/${username}`);
              if (existing) {
                return safeJsonResponse({ error: '用户名已存在' }, 400);
              }
            } catch (e) {
              console.error('检查用户名时出错:', e);
              return safeJsonResponse({ error: '服务器错误' }, 500);
            }
            
            // 创建新用户
            try {
              const passwordHash = simpleSha256(password);
              await env.BLOG_KV.put(`users/${username}`, JSON.stringify({
                username,
                passwordHash,
                avatar: avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${username}`,
                nickname: nickname || username,
                gender: gender || 'unknown',
                bio: bio || '',
                banned: false,
                muted: false,
                role: 'user',
                title: '注册会员',
                createdAt: new Date().toISOString(),
                lastActive: new Date().toISOString()
              }));
              
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('创建用户时出错:', e);
              return safeJsonResponse({ error: '无法创建用户' }, 500);
            }
          }
          
          // 用户登录
          if (pathname === '/api/login' && request.method === 'POST') {
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username, password } = data;
            
            if (!username || !password) {
              return safeJsonResponse({ error: '用户名和密码是必填项' }, 400);
            }
            
            // 验证用户
            const user = await verifyUser(env, username, password);
            if (!user) {
              return safeJsonResponse({ error: '用户名或密码错误' }, 401);
            }
            
            // 生成令牌
            try {
              const payload = {
                username: user.username,
                role: user.role,
                exp: Date.now() + 86400000 // 24小时
              };
              
              const header = btoa(JSON.stringify({ alg: 'HS256' }));
              const payloadStr = btoa(JSON.stringify(payload));
              const signature = simpleSha256(header + payloadStr + env.SECRET_KEY);
              
              return safeJsonResponse({
                token: `${header}.${payloadStr}.${signature}`,
                username: user.username,
                nickname: user.nickname,
                role: user.role,
                title: user.title,
                avatar: user.avatar,
                gender: user.gender,
                bio: user.bio,
                createdAt: user.createdAt,
                lastActive: user.lastActive
              });
            } catch (e) {
              console.error('生成令牌时出错:', e);
              return safeJsonResponse({ error: '无法生成令牌' }, 500);
            }
          }
          
          // 获取用户信息
          if (pathname.startsWith('/api/users/') && request.method === 'GET') {
            const username = pathname.split('/').pop();
            const userKey = `users/${username}`;
            const userData = await env.BLOG_KV.get(userKey);
            
            if (!userData) {
              return safeJsonResponse({ error: '用户不存在' }, 404);
            }
            
            let user;
            try {
              user = JSON.parse(userData);
            } catch (e) {
              console.error('解析用户数据失败:', e);
              return safeJsonResponse({ error: '用户数据损坏' }, 500);
            }
            
            // 只返回必要信息
            return safeJsonResponse({
              username: user.username,
              nickname: user.nickname,
              avatar: user.avatar,
              role: user.role,
              title: user.title,
              gender: user.gender,
              bio: user.bio,
              createdAt: user.createdAt,
              lastActive: user.lastActive,
              banned: user.banned,
              muted: user.muted
            });
          }
          
          // 获取用户帖子
          if (pathname.startsWith('/api/users/') && pathname.endsWith('/posts') && request.method === 'GET') {
            const username = pathname.split('/')[3];
            
            try {
              const list = await env.BLOG_KV.list({ prefix: 'posts/' });
              const posts = [];
              
              for (const key of list.keys) {
                try {
                  const post = await env.BLOG_KV.get(key.name, 'json');
                  if (post && post.author === username) posts.push(post);
                } catch (e) {
                  console.error('获取帖子时出错:', e, key.name);
                }
              }
              
              // 按时间排序（最新在前）
              posts.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
              
              return safeJsonResponse(posts);
            } catch (e) {
              console.error('获取用户帖子时出错:', e);
              return safeJsonResponse({ error: '无法获取用户帖子' }, 500);
            }
          }
          
          // 更新用户信息
          if (pathname.startsWith('/api/users/') && pathname.endsWith('/profile') && request.method === 'PUT') {
            const { valid, error, user: currentUser } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            const username = pathname.split('/')[3];
            if (currentUser.username !== username && currentUser.role !== 'founder' && currentUser.role !== 'admin') {
              return safeJsonResponse({ error: '无权修改他人信息' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const userKey = `users/${username}`;
            const userData = await env.BLOG_KV.get(userKey);
            
            if (!userData) {
              return safeJsonResponse({ error: '用户不存在' }, 404);
            }
            
            let user;
            try {
              user = JSON.parse(userData);
            } catch (e) {
              console.error('解析用户数据失败:', e);
              return safeJsonResponse({ error: '用户数据损坏' }, 500);
            }
            
            // 更新信息
            if (data.nickname !== undefined) user.nickname = data.nickname;
            if (data.avatar !== undefined) user.avatar = data.avatar;
            if (data.gender !== undefined) user.gender = data.gender;
            if (data.bio !== undefined) user.bio = data.bio;
            if (data.title !== undefined && (currentUser.role === 'founder' || currentUser.role === 'admin')) {
              user.title = data.title;
            }
            
            // 更新密码
            if (data.currentPassword && data.newPassword) {
              const currentPasswordHash = simpleSha256(data.currentPassword);
              if (user.passwordHash !== currentPasswordHash) {
                return safeJsonResponse({ error: '当前密码错误' }, 400);
              }
              
              if (data.newPassword.length < 6) {
                return safeJsonResponse({ error: '新密码至少需要6个字符' }, 400);
              }
              
              user.passwordHash = simpleSha256(data.newPassword);
            }
            
            await env.BLOG_KV.put(userKey, JSON.stringify(user));
            return safeJsonResponse({ success: true });
          }
          
          // 注销用户
          if (pathname.startsWith('/api/users/') && pathname.endsWith('/delete') && request.method === 'POST') {
            const { valid, error, user: currentUser } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            const username = pathname.split('/')[3];
            
            // 只有本人或管理员可以注销账户
            if (currentUser.username !== username && currentUser.role !== 'founder' && currentUser.role !== 'admin') {
              return safeJsonResponse({ error: '无权操作此账户' }, 403);
            }
            
            // 创始人账户不能被注销
            if (username === ADMIN_USERNAME) {
              return safeJsonResponse({ error: '不能注销创始人账户' }, 400);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            // 如果是本人注销，需要验证密码
            if (currentUser.username === username) {
              const { password } = data;
              if (!password) {
                return safeJsonResponse({ error: '需要提供密码验证' }, 400);
              }
              
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let user;
              try {
                user = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              const passwordHash = simpleSha256(password);
              if (user.passwordHash !== passwordHash) {
                return safeJsonResponse({ error: '密码错误' }, 400);
              }
            }
            
            try {
              // 删除用户
              await env.BLOG_KV.delete(`users/${username}`);
              
              // 删除用户相关的帖子
              const postList = await env.BLOG_KV.list({ prefix: 'posts/' });
              for (const key of postList.keys) {
                const post = await env.BLOG_KV.get(key.name, 'json');
                if (post && post.author === username) {
                  await env.BLOG_KV.delete(key.name);
                  
                  // 删除相关评论
                  const commentKeys = await env.BLOG_KV.list({ prefix: `comments/${post.id}/` });
                  for (const commentKey of commentKeys.keys) {
                    await env.BLOG_KV.delete(commentKey.name);
                  }
                }
              }
              
              // 删除用户相关的评论
              const allComments = await env.BLOG_KV.list({ prefix: 'comments/' });
              for (const key of allComments.keys) {
                const comment = await env.BLOG_KV.get(key.name, 'json');
                if (comment && comment.author === username) {
                  await env.BLOG_KV.delete(key.name);
                }
              }
              
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('删除用户时出错:', e);
              return safeJsonResponse({ error: '无法删除用户' }, 500);
            }
          }
          
          // 获取所有帖子（带分页）
          if (pathname === '/api/posts' && request.method === 'GET') {
            const page = parseInt(url.searchParams.get('page')) || 1;
            const limit = parseInt(url.searchParams.get('limit')) || 10;
            const search = url.searchParams.get('search') || '';
            
            try {
              const list = await env.BLOG_KV.list({ prefix: 'posts/' });
              let posts = [];
              
              for (const key of list.keys) {
                try {
                  const post = await env.BLOG_KV.get(key.name, 'json');
                  if (post) {
                    // 搜索过滤
                    if (search && 
                        !post.title.toLowerCase().includes(search.toLowerCase()) && 
                        !post.content.toLowerCase().includes(search.toLowerCase())) {
                      continue;
                    }
                    posts.push(post);
                  }
                } catch (e) {
                  console.error('获取帖子时出错:', e, key.name);
                }
              }
              
              // 按时间排序（最新在前）
              posts.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
              
              // 分页
              const total = posts.length;
              const totalPages = Math.ceil(total / limit);
              const startIndex = (page - 1) * limit;
              const endIndex = Math.min(startIndex + limit, total);
              const paginatedPosts = posts.slice(startIndex, endIndex);
              
              // 增加阅读次数
              for (const post of paginatedPosts) {
                post.views = (post.views || 0) + 1;
                await env.BLOG_KV.put(`posts/${post.id}`, JSON.stringify(post));
              }
              
              return safeJsonResponse({
                posts: paginatedPosts,
                pagination: {
                  page,
                  limit,
                  total,
                  totalPages,
                  hasNext: page < totalPages,
                  hasPrev: page > 1
                }
              });
            } catch (e) {
              console.error('获取帖子列表时出错:', e);
              return safeJsonResponse({ error: '无法获取帖子' }, 500);
            }
          }
          
          // 发布新帖子
          if (pathname === '/api/posts' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 检查是否被禁言
            if (user.muted) {
              return safeJsonResponse({ error: '您已被禁言，无法发帖' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { title, content, image } = data;
            
            if (!title || !content) {
              return safeJsonResponse({ error: '标题和内容不能为空' }, 400);
            }
            
            try {
              const postId = generateUUID();
              await env.BLOG_KV.put(`posts/${postId}`, JSON.stringify({
                id: postId,
                title,
                content,
                image: image || '',
                author: user.username,
                nickname: user.nickname,
                avatar: user.avatar,
                views: 0,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
              }));
              
              return safeJsonResponse({ postId });
            } catch (e) {
              console.error('创建帖子时出错:', e);
              return safeJsonResponse({ error: '无法发布帖子' }, 500);
            }
          }
          
          // 删除帖子（管理员）
          if (pathname.startsWith('/api/posts/') && request.method === 'DELETE') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以删除帖子
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            const postId = pathname.split('/').pop();
            try {
              const post = await env.BLOG_KV.get(`posts/${postId}`, 'json');
              
              // 创始人可以删除任何帖子，管理员只能删除非创始人的帖子
              if (user.role === 'admin' && post.author === ADMIN_USERNAME) {
                return safeJsonResponse({ error: '无权删除创始人的帖子' }, 403);
              }
              
              await env.BLOG_KV.delete(`posts/${postId}`);
              
              // 删除相关评论
              const commentKeys = await env.BLOG_KV.list({ prefix: `comments/${postId}/` });
              if (commentKeys.keys.length > 0) {
                await Promise.all(commentKeys.keys.map(k => 
                  env.BLOG_KV.delete(k.name).catch(e => {
                    console.error('删除评论时出错:', e, k.name);
                  })
                ));
              }
              
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('删除帖子时出错:', e);
              return safeJsonResponse({ error: '无法删除帖子' }, 500);
            }
          }
          
          // 发布评论
          if (pathname.startsWith('/api/posts/') && pathname.endsWith('/comments') && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 检查是否被禁言
            if (user.muted) {
              return safeJsonResponse({ error: '您已被禁言，无法评论' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { content } = data;
            
            if (!content || content.trim() === '') {
              return safeJsonResponse({ error: '评论内容不能为空' }, 400);
            }
            
            const postId = pathname.split('/')[3];
            try {
              const commentId = generateUUID();
              await env.BLOG_KV.put(`comments/${postId}/${commentId}`, JSON.stringify({
                id: commentId,
                postId,
                content,
                author: user.username,
                nickname: user.nickname,
                avatar: user.avatar,
                createdAt: new Date().toISOString()
              }));
              
              return safeJsonResponse({ commentId });
            } catch (e) {
              console.error('创建评论时出错:', e);
              return safeJsonResponse({ error: '无法发布评论' }, 500);
            }
          }
          
          // 获取帖子评论
          if (pathname.startsWith('/api/posts/') && pathname.endsWith('/comments') && request.method === 'GET') {
            const postId = pathname.split('/')[3];
            try {
              const list = await env.BLOG_KV.list({ prefix: `comments/${postId}/` });
              const comments = [];
              
              for (const key of list.keys) {
                try {
                  const comment = await env.BLOG_KV.get(key.name, 'json');
                  if (comment) comments.push(comment);
                } catch (e) {
                  console.error('获取评论时出错:', e, key.name);
                }
              }
              
              // 按时间排序（最新在前）
              comments.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
              
              return safeJsonResponse(comments);
            } catch (e) {
              console.error('获取评论列表时出错:', e);
              return safeJsonResponse({ error: '无法获取评论' }, 500);
            }
          }
          
          // 删除评论
          if ((pathname.startsWith('/api/comments/') || 
               (pathname.startsWith('/api/posts/') && pathname.includes('/comments/'))) && 
              request.method === 'DELETE') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 从路径中提取postId和commentId
            let postId, commentId;
            
            // 处理 /api/comments/postId/commentId 格式
            if (pathname.startsWith('/api/comments/')) {
              const parts = pathname.split('/');
              if (parts.length >= 5) {
                postId = parts[3];
                commentId = parts[4];
              }
            } 
            // 处理 /api/posts/postId/comments/commentId 格式
            else if (pathname.includes('/comments/')) {
              const parts = pathname.split('/');
              const commentIndex = parts.indexOf('comments');
              if (commentIndex > 0 && commentIndex < parts.length - 1) {
                postId = parts[commentIndex - 1];
                commentId = parts[commentIndex + 1];
              }
            }
            
            if (!postId || !commentId) {
              return safeJsonResponse({ error: '无效的评论ID' }, 400);
            }
            
            // 获取评论
            try {
              const comment = await env.BLOG_KV.get(`comments/${postId}/${commentId}`, 'json');
              if (!comment) {
                return safeJsonResponse({ error: '评论不存在' }, 404);
              }
              
              // 检查权限：管理员或评论作者
              if (user.role !== 'founder' && user.role !== 'admin' && comment.author !== user.username) {
                return safeJsonResponse({ error: '无权删除此评论' }, 403);
              }
              
              // 管理员不能删除创始人的评论
              if (user.role === 'admin' && comment.author === ADMIN_USERNAME) {
                return safeJsonResponse({ error: '无权删除创始人的评论' }, 403);
              }
              
              // 删除评论
              await env.BLOG_KV.delete(`comments/${postId}/${commentId}`);
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('删除评论时出错:', e);
              return safeJsonResponse({ error: '无法删除评论' }, 500);
            }
          }
          
          // 封禁用户（仅管理员）
          if (pathname === '/api/ban' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以封禁用户
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            if (username === ADMIN_USERNAME) {
              return safeJsonResponse({ error: '不能封禁创始人' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              // 管理员不能封禁其他管理员
              if (user.role === 'admin' && (userObj.role === 'admin' || userObj.role === 'founder')) {
                return safeJsonResponse({ error: '无权封禁其他管理员' }, 403);
              }
              
              userObj.banned = true;
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  banned: true
                }
              });
            } catch (e) {
              console.error('封禁用户时出错:', e);
              return safeJsonResponse({ error: '无法封禁用户' }, 500);
            }
          }
          
          // 解封用户（仅管理员）
          if (pathname === '/api/unban' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以解封用户
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              userObj.banned = false;
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  banned: false
                }
              });
            } catch (e) {
              console.error('解封用户时出错:', e);
              return safeJsonResponse({ error: '无法解封用户' }, 500);
            }
          }
          
          // 禁言用户（仅管理员）
          if (pathname === '/api/mute' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以禁言用户
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            if (username === ADMIN_USERNAME) {
              return safeJsonResponse({ error: '不能禁言创始人' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              // 管理员不能禁言其他管理员
              if (user.role === 'admin' && (userObj.role === 'admin' || userObj.role === 'founder')) {
                return safeJsonResponse({ error: '无权禁言其他管理员' }, 403);
              }
              
              userObj.muted = true;
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  muted: true
                }
              });
            } catch (e) {
              console.error('禁言用户时出错:', e);
              return safeJsonResponse({ error: '无法禁言用户' }, 500);
            }
          }
          
          // 解除禁言（仅管理员）
          if (pathname === '/api/unmute' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以解除禁言
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              userObj.muted = false;
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  muted: false
                }
              });
            } catch (e) {
              console.error('解除禁言时出错:', e);
              return safeJsonResponse({ error: '无法解除禁言' }, 500);
            }
          }
          
          // 设置管理员（仅创始人）
          if (pathname === '/api/set-admin' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有创始人可以设置管理员
            if (user.role !== 'founder') {
              return safeJsonResponse({ error: '需要创始人权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            if (username === ADMIN_USERNAME) {
              return safeJsonResponse({ error: '不能修改创始人权限' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              userObj.role = 'admin';
              userObj.title = '管理员';
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  role: 'admin',
                  title: '管理员'
                }
              });
            } catch (e) {
              console.error('设置管理员时出错:', e);
              return safeJsonResponse({ error: '无法设置管理员' }, 500);
            }
          }
          
          // 取消管理员（仅创始人）
          if (pathname === '/api/remove-admin' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有创始人可以取消管理员
            if (user.role !== 'founder') {
              return safeJsonResponse({ error: '需要创始人权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username } = data;
            
            if (!username) {
              return safeJsonResponse({ error: '需要提供用户名' }, 400);
            }
            
            if (username === ADMIN_USERNAME) {
              return safeJsonResponse({ error: '不能修改创始人权限' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              userObj.role = 'user';
              userObj.title = '注册会员';
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ 
                success: true,
                user: {
                  username: username,
                  role: 'user',
                  title: '注册会员'
                }
              });
            } catch (e) {
              console.error('取消管理员时出错:', e);
              return safeJsonResponse({ error: '无法取消管理员' }, 500);
            }
          }
          
          // 设置邀请码（仅创始人）
          if (pathname === '/api/set-invite-code' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有创始人可以设置邀请码
            if (user.role !== 'founder') {
              return safeJsonResponse({ error: '需要创始人权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { inviteCode } = data;
            
            if (!inviteCode) {
              return safeJsonResponse({ error: '需要提供邀请码' }, 400);
            }
            
            try {
              await env.BLOG_KV.put('settings/invite_code', inviteCode);
              return safeJsonResponse({ success: true, inviteCode });
            } catch (e) {
              console.error('设置邀请码时出错:', e);
              return safeJsonResponse({ error: '无法设置邀请码' }, 500);
            }
          }
          
          // 重置用户密码（仅管理员）
          if (pathname === '/api/reset-password' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 只有管理员可以重置密码
            if (user.role !== 'founder' && user.role !== 'admin') {
              return safeJsonResponse({ error: '需要管理员权限' }, 403);
            }
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { username, newPassword } = data;
            
            if (!username || !newPassword) {
              return safeJsonResponse({ error: '需要提供用户名和新密码' }, 400);
            }
            
            if (username === ADMIN_USERNAME && user.role !== 'founder') {
              return safeJsonResponse({ error: '只有创始人可以重置创始人密码' }, 403);
            }
            
            if (newPassword.length < 6) {
              return safeJsonResponse({ error: '新密码至少需要6个字符' }, 400);
            }
            
            try {
              const userKey = `users/${username}`;
              const userData = await env.BLOG_KV.get(userKey);
              
              if (!userData) {
                return safeJsonResponse({ error: '用户不存在' }, 404);
              }
              
              let userObj;
              try {
                userObj = JSON.parse(userData);
              } catch (e) {
                console.error('解析用户数据失败:', e);
                return safeJsonResponse({ error: '用户数据损坏' }, 500);
              }
              
              // 管理员不能重置其他管理员的密码
              if (user.role === 'admin' && (userObj.role === 'admin' || userObj.role === 'founder')) {
                return safeJsonResponse({ error: '无权重置其他管理员的密码' }, 403);
              }
              
              userObj.passwordHash = simpleSha256(newPassword);
              
              await env.BLOG_KV.put(userKey, JSON.stringify(userObj));
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('重置密码时出错:', e);
              return safeJsonResponse({ error: '无法重置密码' }, 500);
            }
          }
          
          // 发送消息
          if (pathname === '/api/messages' && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            let data;
            try {
              data = await request.json();
            } catch (e) {
              return safeJsonResponse({ error: '无效的JSON数据' }, 400);
            }
            
            const { to, content } = data;
            
            if (!to || !content) {
              return safeJsonResponse({ error: '接收者和内容是必填项' }, 400);
            }
            
            // 检查接收者是否存在
            const toUser = await env.BLOG_KV.get(`users/${to}`);
            if (!toUser) {
              return safeJsonResponse({ error: '接收者不存在' }, 404);
            }
            
            // 创建消息
            const messageId = generateUUID();
            const message = {
              id: messageId,
              from: user.username,
              to: to,
              content: content,
              createdAt: new Date().toISOString(),
              read: false
            };
            
            // 保存消息
            await env.BLOG_KV.put(`messages/${messageId}`, JSON.stringify(message));
            
            // 添加到发送者和接收者的消息列表
            await env.BLOG_KV.put(`user-messages/${user.username}/${messageId}`, 'sent');
            await env.BLOG_KV.put(`user-messages/${to}/${messageId}`, 'received');
            
            return safeJsonResponse({ messageId });
          }
          
          // 获取消息
          if (pathname === '/api/messages' && request.method === 'GET') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            // 获取所有消息
            const sentMessages = await env.BLOG_KV.list({ prefix: `user-messages/${user.username}/` });
            const messages = [];
            
            for (const key of sentMessages.keys) {
              const messageId = key.name.split('/').pop();
              const message = await env.BLOG_KV.get(`messages/${messageId}`, 'json');
              if (message) messages.push(message);
            }
            
            // 按时间排序
            messages.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            return safeJsonResponse(messages);
          }
          
          // 标记消息为已读
          if (pathname.startsWith('/api/messages/') && pathname.endsWith('/read') && request.method === 'POST') {
            const { valid, error, user } = await checkPermission(env, request);
            if (!valid) return safeJsonResponse({ error }, 403);
            
            const messageId = pathname.split('/')[3];
            try {
              const message = await env.BLOG_KV.get(`messages/${messageId}`, 'json');
              if (!message) {
                return safeJsonResponse({ error: '消息不存在' }, 404);
              }
              
              // 检查权限：只有接收者可以标记消息为已读
              if (message.to !== user.username) {
                return safeJsonResponse({ error: '无权操作此消息' }, 403);
              }
              
              message.read = true;
              await env.BLOG_KV.put(`messages/${messageId}`, JSON.stringify(message));
              
              return safeJsonResponse({ success: true });
            } catch (e) {
              console.error('标记消息为已读时出错:', e);
              return safeJsonResponse({ error: '无法标记消息为已读' }, 500);
            }
          }
          
          return safeJsonResponse({ error: 'API 未找到' }, 404);
        } catch (e) {
          console.error('API 处理时出错:', e);
          return safeJsonResponse({ 
            error: '服务器内部错误',
            details: e.message 
          }, 500);
        }
      }
      
      // 404 处理
      return new Response('Not Found', { 
        status: 404,
        headers: { 'Access-Control-Allow-Origin': '*' }
      });
    } catch (e) {
      console.error('全局错误:', e);
      return safeJsonResponse({ 
        error: '严重错误',
        details: e.message 
      }, 500);
    }
  }
};

// 前端 HTML（由于字符限制，这里只提供部分HTML，完整HTML需要根据要求设计）
const indexHTML = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>曦月的小窝</title>
  <style>
    /* 样式代码由于字符限制已省略，但会包含Fuwari风格的设计 */
    /* 包括渐变背景、毛玻璃效果、响应式布局等 */
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>曦月的小窝</h1>
      <div class="auth-section" id="authSection">
        <!-- 动态生成登录/注册/用户信息 -->
      </div>
    </header>

    <nav class="main-nav">
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="搜索帖子...">
        <button id="searchBtn">🔍</button>
      </div>
    </nav>

    <main>
      <div class="tabs">
        <div class="tab active" data-tab="posts">全部帖子</div>
        <div class="tab" data-tab="create">发帖</div>
        <div class="tab" data-tab="messages" id="messagesTabBtn" style="display:none;">消息</div>
      </div>

      <div id="postsTab" class="tab-content active">
        <div class="card">
          <h2>最新帖子</h2>
          <div id="postsContainer">
            <!-- 帖子将动态加载到这里 -->
          </div>
          <div class="pagination" id="pagination">
            <!-- 分页控件 -->
          </div>
        </div>
      </div>

      <!-- 其他界面内容 -->
    </main>

    <footer>
      <p>© 2024 曦月的小窝 - <a href="/rss.xml">订阅RSS</a></p>
      <p id="uptime">本站已运行: <span id="uptimeCounter">0</span> 秒</p>
    </footer>
  </div>

  <script>
    // 前端JavaScript代码由于字符限制已省略
    // 包括用户认证、帖子加载、评论、私信等功能
  </script>
</body>
</html>`;